apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
          {
              "apiVersion": "helm-operator.sumologic.com/v1alpha1",
              "kind": "SumologicCollection",
              "metadata": {
                  "name": "collection"
              },
              "spec": {
                  "nameOverride": "",
                  "sumologic": {
                      "setupEnabled": true,
                      "cleanupEnabled": false,
                      "accessId": "",
                      "accessKey": "",
                      "endpoint": "",
                      "httpProxy": "",
                      "httpsProxy": "",
                      "noProxy": "kubernetes.default.svc",
                      "clusterName": "kubernetes",
                      "cluster": {
                          "host": "https://kubernetes.default.svc",
                          "cluster_ca_certificate": "${file(\"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\")}",
                          "token": "${file(\"/var/run/secrets/kubernetes.io/serviceaccount/token\")}",
                          "load_config_file": false
                      },
                      "collectionMonitoring": true,
                      "podLabels": {},
                      "podAnnotations": {},
                      "scc": {
                          "create": true
                      },
                      "setup": {
                          "job": {
                              "image": {
                                  "repository": "public.ecr.aws/sumologic/kubernetes-setup",
                                  "tag": "3.0.0",
                                  "pullPolicy": "IfNotPresent"
                              },
                              "resources": {
                                  "limits": {
                                      "memory": "256Mi",
                                      "cpu": "2000m"
                                  },
                                  "requests": {
                                      "memory": "64Mi",
                                      "cpu": "200m"
                                  }
                              },
                              "nodeSelector": {},
                              "podLabels": {},
                              "podAnnotations": {}
                          }
                      },
                      "collector": {
                          "fields": {},
                          "sources": {
                              "metrics": {
                                  "default": {
                                      "name": "(default-metrics)",
                                      "config-name": "endpoint-metrics"
                                  },
                                  "apiserver": {
                                      "name": "apiserver-metrics",
                                      "config-name": "endpoint-metrics-apiserver"
                                  },
                                  "controller": {
                                      "name": "kube-controller-manager-metrics",
                                      "config-name": "endpoint-metrics-kube-controller-manager"
                                  },
                                  "scheduler": {
                                      "name": "kube-scheduler-metrics",
                                      "config-name": "endpoint-metrics-kube-scheduler"
                                  },
                                  "state": {
                                      "name": "kube-state-metrics",
                                      "config-name": "endpoint-metrics-kube-state"
                                  },
                                  "kubelet": {
                                      "name": "kubelet-metrics",
                                      "config-name": "endpoint-metrics-kubelet"
                                  },
                                  "node": {
                                      "name": "node-exporter-metrics",
                                      "config-name": "endpoint-metrics-node-exporter"
                                  },
                                  "control-plane": {
                                      "name": "control-plane-metrics"
                                  }
                              },
                              "logs": {
                                  "default": {
                                      "name": "logs",
                                      "config-name": "endpoint-logs"
                                  }
                              },
                              "events": {
                                  "default": {
                                      "name": "events",
                                      "config-name": "endpoint-events",
                                      "category": true
                                  }
                              },
                              "traces": {
                                  "default": {
                                      "name": "traces",
                                      "config-name": "endpoint-traces",
                                      "properties": {
                                          "content_type": "Zipkin"
                                      }
                                  }
                              }
                          }
                      },
                      "logs": {
                          "enabled": true,
                          "fields": [
                              "cluster",
                              "container",
                              "deployment",
                              "host",
                              "namespace",
                              "node",
                              "pod",
                              "service"
                          ]
                      },
                      "metrics": {
                          "enabled": true
                      },
                      "traces": {
                          "enabled": false,
                          "spans_per_request": 100
                      }
                  },
                  "fluentd": {
                      "image": {
                          "repository": "public.ecr.aws/sumologic/kubernetes-fluentd",
                          "tag": "1.12.2-sumo-0",
                          "pullPolicy": "IfNotPresent"
                      },
                      "podSecurityPolicy": {
                          "create": false
                      },
                      "additionalPlugins": [],
                      "logLevel": "info",
                      "logLevelFilter": true,
                      "verifySsl": true,
                      "proxyUri": "",
                      "compression": {
                          "enabled": true,
                          "encoding": "gzip"
                      },
                      "securityContext": {
                          "fsGroup": 999
                      },
                      "podLabels": {},
                      "podAnnotations": {},
                      "persistence": {
                          "enabled": true,
                          "accessMode": "ReadWriteOnce",
                          "size": "10Gi"
                      },
                      "buffer": {
                          "type": "memory",
                          "flushInterval": "5s",
                          "numThreads": 8,
                          "chunkLimitSize": "1m",
                          "queueChunkLimitSize": 128,
                          "totalLimitSize": "128m",
                          "retryMaxInterval": "10m",
                          "retryForever": true,
                          "compress": "gzip",
                          "filePaths": {
                              "logs": {
                                  "containers": "/fluentd/buffer/logs.containers",
                                  "kubelet": "/fluentd/buffer/logs.kubelet",
                                  "systemd": "/fluentd/buffer/logs.systemd",
                                  "default": "/fluentd/buffer/logs.default"
                              },
                              "metrics": {
                                  "apiserver": "/fluentd/buffer/metrics.apiserver",
                                  "kubelet": "/fluentd/buffer/metrics.kubelet",
                                  "container": "/fluentd/buffer/metrics.container",
                                  "controller": "/fluentd/buffer/metrics.controller",
                                  "scheduler": "/fluentd/buffer/metrics.scheduler",
                                  "state": "/fluentd/buffer/metrics.state",
                                  "node": "/fluentd/buffer/metrics.node",
                                  "control-plane": "/fluentd/buffer/metrics.control_plane",
                                  "default": "/fluentd/buffer/metrics.default"
                              },
                              "events": "/fluentd/buffer/events",
                              "traces": "/fluentd/buffer/traces"
                          },
                          "extraConf": ""
                      },
                      "monitoring": {
                          "input": false,
                          "output": false
                      },
                      "metadata": {
                          "cacheSize": "10000",
                          "cacheTtl": "7200",
                          "cacheRefresh": "3600",
                          "cacheRefreshVariation": "900",
                          "pluginLogLevel": "error",
                          "coreApiVersions": [
                              "v1"
                          ],
                          "apiGroups": [
                              "apps/v1",
                              "extensions/v1beta1"
                          ]
                      },
                      "logs": {
                          "enabled": true,
                          "statefulset": {
                              "nodeSelector": {},
                              "tolerations": [],
                              "affinity": {},
                              "podAntiAffinity": "soft",
                              "replicaCount": 3,
                              "resources": {
                                  "limits": {
                                      "memory": "1Gi",
                                      "cpu": "1000m"
                                  },
                                  "requests": {
                                      "memory": "768Mi",
                                      "cpu": "500m"
                                  }
                              },
                              "priorityClassName": null,
                              "podLabels": {},
                              "podAnnotations": {},
                              "containers": {
                                  "fluentd": {
                                      "securityContext": {}
                                  }
                              }
                          },
                          "autoscaling": {
                              "enabled": false,
                              "minReplicas": 3,
                              "maxReplicas": 10,
                              "targetCPUUtilizationPercentage": 50
                          },
                          "podDisruptionBudget": {
                              "minAvailable": 2
                          },
                          "rawConfig": "@include common.conf\n@include logs.conf",
                          "input": {
                              "forwardExtraConf": ""
                          },
                          "output": {
                              "logFormat": "fields",
                              "addTimestamp": true,
                              "timestampKey": "timestamp",
                              "pluginLogLevel": "error",
                              "extraConf": ""
                          },
                          "extraLogs": "",
                          "containers": {
                              "overrideRawConfig": "",
                              "outputConf": "@include logs.output.conf",
                              "overrideOutputConf": "",
                              "sourceName": "%{namespace}.%{pod}.%{container}",
                              "sourceCategory": "%{namespace}/%{pod_name}",
                              "sourceCategoryPrefix": "kubernetes/",
                              "sourceCategoryReplaceDash": "/",
                              "excludeContainerRegex": "",
                              "excludeHostRegex": "",
                              "excludeNamespaceRegex": "",
                              "excludePodRegex": "",
                              "perContainerAnnotationsEnabled": false,
                              "perContainerAnnotationPrefixes": [],
                              "k8sMetadataFilter": {
                                  "watch": "true",
                                  "caFile": "",
                                  "verifySsl": true,
                                  "clientCert": "",
                                  "clientKey": "",
                                  "bearerTokenFile": ""
                              },
                              "extraFilterPluginConf": "",
                              "extraOutputPluginConf": "",
                              "multiline": {
                                  "enabled": true
                              }
                          },
                          "kubelet": {
                              "enabled": true,
                              "extraFilterPluginConf": "",
                              "extraOutputPluginConf": "",
                              "outputConf": "@include logs.output.conf",
                              "overrideOutputConf": "",
                              "sourceName": "k8s_kubelet",
                              "sourceCategory": "kubelet",
                              "sourceCategoryPrefix": "kubernetes/",
                              "sourceCategoryReplaceDash": "/",
                              "excludeFacilityRegex": "",
                              "excludeHostRegex": "",
                              "excludePriorityRegex": "",
                              "excludeUnitRegex": ""
                          },
                          "systemd": {
                              "enabled": true,
                              "extraFilterPluginConf": "",
                              "extraOutputPluginConf": "",
                              "outputConf": "@include logs.output.conf",
                              "overrideOutputConf": "",
                              "sourceName": "k8s_systemd",
                              "sourceCategory": "system",
                              "sourceCategoryPrefix": "kubernetes/",
                              "sourceCategoryReplaceDash": "/",
                              "excludeFacilityRegex": "",
                              "excludeHostRegex": "",
                              "excludePriorityRegex": "",
                              "excludeUnitRegex": ""
                          },
                          "default": {
                              "extraFilterPluginConf": "",
                              "extraOutputPluginConf": "",
                              "outputConf": "@include logs.output.conf",
                              "overrideOutputConf": "",
                              "sourceName": "k8s_default",
                              "sourceCategory": "default",
                              "sourceCategoryPrefix": "kubernetes/",
                              "sourceCategoryReplaceDash": "/",
                              "excludeFacilityRegex": "",
                              "excludeHostRegex": "",
                              "excludePriorityRegex": "",
                              "excludeUnitRegex": ""
                          }
                      },
                      "metrics": {
                          "enabled": true,
                          "statefulset": {
                              "nodeSelector": {},
                              "tolerations": [],
                              "affinity": {},
                              "podAntiAffinity": "soft",
                              "replicaCount": 3,
                              "resources": {
                                  "limits": {
                                      "memory": "1Gi",
                                      "cpu": "1000m"
                                  },
                                  "requests": {
                                      "memory": "768Mi",
                                      "cpu": "500m"
                                  }
                              },
                              "priorityClassName": null,
                              "podLabels": {},
                              "podAnnotations": {},
                              "containers": {
                                  "fluentd": {
                                      "securityContext": {}
                                  }
                              }
                          },
                          "autoscaling": {
                              "enabled": false,
                              "minReplicas": 3,
                              "maxReplicas": 10,
                              "targetCPUUtilizationPercentage": 50
                          },
                          "podDisruptionBudget": {
                              "minAvailable": 2
                          },
                          "rawConfig": "@include common.conf\n@include metrics.conf",
                          "outputConf": "@include metrics.output.conf",
                          "overrideOutputConf": "",
                          "extraFilterPluginConf": "",
                          "extraOutputPluginConf": "",
                          "output": {
                              "apiserver": {
                                  "tag": "prometheus.metrics.apiserver**",
                                  "id": "sumologic.endpoint.metrics.apiserver",
                                  "weight": 90
                              },
                              "kubelet": {
                                  "tag": "prometheus.metrics.kubelet**",
                                  "id": "sumologic.endpoint.metrics.kubelet",
                                  "weight": 90
                              },
                              "container": {
                                  "tag": "prometheus.metrics.container**",
                                  "id": "sumologic.endpoint.metrics.container",
                                  "source": "kubelet",
                                  "weight": 90
                              },
                              "controller": {
                                  "tag": "prometheus.metrics.controller-manager**",
                                  "id": "sumologic.endpoint.metrics.kube.controller.manager",
                                  "weight": 90
                              },
                              "scheduler": {
                                  "tag": "prometheus.metrics.scheduler**",
                                  "id": "sumologic.endpoint.metrics.kube.scheduler",
                                  "weight": 90
                              },
                              "state": {
                                  "tag": "prometheus.metrics.state**",
                                  "id": "sumologic.endpoint.metrics.kube.state",
                                  "weight": 90
                              },
                              "node": {
                                  "tag": "prometheus.metrics.node**",
                                  "id": "sumologic.endpoint.metrics.node.exporter",
                                  "weight": 90
                              },
                              "control-plane": {
                                  "tag": "prometheus.metrics.control-plane**",
                                  "id": "sumologic.endpoint.metrics.control.plane",
                                  "weight": 90
                              },
                              "default": {
                                  "tag": "prometheus.metrics**",
                                  "id": "sumologic.endpoint.metrics",
                                  "weight": 100
                              }
                          }
                      },
                      "events": {
                          "enabled": true,
                          "statefulset": {
                              "nodeSelector": {},
                              "tolerations": [],
                              "resources": {
                                  "limits": {
                                      "memory": "512Mi",
                                      "cpu": "200m"
                                  },
                                  "requests": {
                                      "memory": "256Mi",
                                      "cpu": "100m"
                                  }
                              },
                              "priorityClassName": null,
                              "podLabels": {},
                              "podAnnotations": {},
                              "containers": {
                                  "fluentd": {
                                      "securityContext": {}
                                  }
                              }
                          },
                          "overrideOutputConf": "",
                          "sourceCategory": ""
                      }
                  },
                  "metrics-server": {
                      "enabled": false,
                      "apiService": {
                          "create": true
                      },
                      "extraArgs": {
                          "kubelet-insecure-tls": true,
                          "kubelet-preferred-address-types": "InternalIP,ExternalIP,Hostname"
                      }
                  },
                  "fluent-bit": {
                      "image": {
                          "repository": "public.ecr.aws/sumologic/fluent-bit",
                          "pullPolicy": "IfNotPresent"
                      },
                      "resources": {},
                      "service": {
                          "labels": {
                              "sumologic.com/scrape": "true"
                          }
                      },
                      "podLabels": {},
                      "podAnnotations": {},
                      "securityContext": {
                          "privileged": true
                      },
                      "env": [
                          {
                              "name": "FLUENTD_LOGS_SVC",
                              "valueFrom": {
                                  "configMapKeyRef": {
                                      "name": "sumologic-configmap",
                                      "key": "fluentdLogs"
                                  }
                              }
                          },
                          {
                              "name": "NAMESPACE",
                              "valueFrom": {
                                  "fieldRef": {
                                      "fieldPath": "metadata.namespace"
                                  }
                              }
                          }
                      ],
                      "tolerations": [
                          {
                              "effect": "NoSchedule",
                              "operator": "Exists"
                          }
                      ],
                      "extraVolumeMounts": [
                          {
                              "mountPath": "/tail-db",
                              "name": "tail-db"
                          }
                      ],
                      "extraVolumes": [
                          {
                              "hostPath": {
                                  "path": "/var/lib/fluent-bit",
                                  "type": "DirectoryOrCreate"
                              },
                              "name": "tail-db"
                          }
                      ],
                      "config": {
                          "service": "[SERVICE]\n    Flush        1\n    Daemon       Off\n    Log_Level    info\n    Parsers_File parsers.conf\n    Parsers_File custom_parsers.conf\n    HTTP_Server  On\n    HTTP_Listen  0.0.0.0\n    HTTP_Port    2020\n",
                          "inputs": "[INPUT]\n    Name                tail\n    Path                /var/log/containers/*.log\n    Parser              crio\n    Tag                 containers.*\n    Refresh_Interval    1\n    Rotate_Wait         60\n    Mem_Buf_Limit       5MB\n    Skip_Long_Lines     On\n    DB                  /tail-db/tail-containers-state-sumo.db\n    DB.Sync             Normal\n[INPUT]\n    Name            systemd\n    Tag             host.*\n    DB              /tail-db/systemd-state-sumo.db\n    Systemd_Filter  _SYSTEMD_UNIT=addon-config.service\n    Systemd_Filter  _SYSTEMD_UNIT=addon-run.service\n    Systemd_Filter  _SYSTEMD_UNIT=cfn-etcd-environment.service\n    Systemd_Filter  _SYSTEMD_UNIT=cfn-signal.service\n    Systemd_Filter  _SYSTEMD_UNIT=clean-ca-certificates.service\n    Systemd_Filter  _SYSTEMD_UNIT=containerd.service\n    Systemd_Filter  _SYSTEMD_UNIT=coreos-metadata.service\n    Systemd_Filter  _SYSTEMD_UNIT=coreos-setup-environment.service\n    Systemd_Filter  _SYSTEMD_UNIT=coreos-tmpfiles.service\n    Systemd_Filter  _SYSTEMD_UNIT=dbus.service\n    Systemd_Filter  _SYSTEMD_UNIT=docker.service\n    Systemd_Filter  _SYSTEMD_UNIT=efs.service\n    Systemd_Filter  _SYSTEMD_UNIT=etcd-member.service\n    Systemd_Filter  _SYSTEMD_UNIT=etcd.service\n    Systemd_Filter  _SYSTEMD_UNIT=etcd2.service\n    Systemd_Filter  _SYSTEMD_UNIT=etcd3.service\n    Systemd_Filter  _SYSTEMD_UNIT=etcdadm-check.service\n    Systemd_Filter  _SYSTEMD_UNIT=etcdadm-reconfigure.service\n    Systemd_Filter  _SYSTEMD_UNIT=etcdadm-save.service\n    Systemd_Filter  _SYSTEMD_UNIT=etcdadm-update-status.service\n    Systemd_Filter  _SYSTEMD_UNIT=flanneld.service\n    Systemd_Filter  _SYSTEMD_UNIT=format-etcd2-volume.service\n    Systemd_Filter  _SYSTEMD_UNIT=kube-node-taint-and-uncordon.service\n    Systemd_Filter  _SYSTEMD_UNIT=kubelet.service\n    Systemd_Filter  _SYSTEMD_UNIT=ldconfig.service\n    Systemd_Filter  _SYSTEMD_UNIT=locksmithd.service\n    Systemd_Filter  _SYSTEMD_UNIT=logrotate.service\n    Systemd_Filter  _SYSTEMD_UNIT=lvm2-monitor.service\n    Systemd_Filter  _SYSTEMD_UNIT=mdmon.service\n    Systemd_Filter  _SYSTEMD_UNIT=nfs-idmapd.service\n    Systemd_Filter  _SYSTEMD_UNIT=nfs-mountd.service\n    Systemd_Filter  _SYSTEMD_UNIT=nfs-server.service\n    Systemd_Filter  _SYSTEMD_UNIT=nfs-utils.service\n    Systemd_Filter  _SYSTEMD_UNIT=node-problem-detector.service\n    Systemd_Filter  _SYSTEMD_UNIT=ntp.service\n    Systemd_Filter  _SYSTEMD_UNIT=oem-cloudinit.service\n    Systemd_Filter  _SYSTEMD_UNIT=rkt-gc.service\n    Systemd_Filter  _SYSTEMD_UNIT=rkt-metadata.service\n    Systemd_Filter  _SYSTEMD_UNIT=rpc-idmapd.service\n    Systemd_Filter  _SYSTEMD_UNIT=rpc-mountd.service\n    Systemd_Filter  _SYSTEMD_UNIT=rpc-statd.service\n    Systemd_Filter  _SYSTEMD_UNIT=rpcbind.service\n    Systemd_Filter  _SYSTEMD_UNIT=set-aws-environment.service\n    Systemd_Filter  _SYSTEMD_UNIT=system-cloudinit.service\n    Systemd_Filter  _SYSTEMD_UNIT=systemd-timesyncd.service\n    Systemd_Filter  _SYSTEMD_UNIT=update-ca-certificates.service\n    Systemd_Filter  _SYSTEMD_UNIT=user-cloudinit.service\n    Systemd_Filter  _SYSTEMD_UNIT=var-lib-etcd2.service\n    Max_Entries     1000\n    Read_From_Tail  true\n",
                          "outputs": "[OUTPUT]\n    Name          forward\n    Match         *\n    Host          ${FLUENTD_LOGS_SVC}.${NAMESPACE}.svc.cluster.local.\n    Port          24321\n    Retry_Limit   False\n    tls           off\n    tls.verify    on\n    tls.debug     1\n    # Disable keepalive for better load balancing\n    net.keepalive off\n",
                          "customParsers": "[PARSER]\n    Name        multi_line\n    Format      regex\n    Regex       (?<log>^{\"log\":\"\\d{4}-\\d{1,2}-\\d{1,2}.\\d{2}:\\d{2}:\\d{2}.*)\n[PARSER]\n    Name         crio\n    Format       regex\n    Regex        ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$\n    Time_Key     time\n    Time_Format  %Y-%m-%dT%H:%M:%S.%L%z\n[PARSER]\n    Name         containerd\n    Format       regex\n    Regex        ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$\n    Time_Key     time\n    Time_Format  %Y-%m-%dT%H:%M:%S.%LZ\n"
                      }
                  },
                  "kube-prometheus-stack": {
                      "commonLabels": {},
                      "additionalPrometheusRulesMap": {
                          "pre-1.14-node-rules": {
                              "groups": [
                                  {
                                      "name": "node-pre-1.14.rules",
                                      "rules": [
                                          {
                                              "expr": "1 - avg(rate(node_cpu_seconds_total{job=\"node-exporter\",mode=\"idle\"}[1m]))",
                                              "record": ":node_cpu_utilisation:avg1m"
                                          },
                                          {
                                              "expr": "1 - avg by (node) (\n  rate(node_cpu_seconds_total{job=\"node-exporter\",mode=\"idle\"}[1m])\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:)",
                                              "record": "node:node_cpu_utilisation:avg1m"
                                          },
                                          {
                                              "expr": "1 -\nsum(\n  node_memory_MemFree_bytes{job=\"node-exporter\"} +\n  node_memory_Cached_bytes{job=\"node-exporter\"} +\n  node_memory_Buffers_bytes{job=\"node-exporter\"}\n)\n/\nsum(node_memory_MemTotal_bytes{job=\"node-exporter\"})",
                                              "record": ":node_memory_utilisation:"
                                          },
                                          {
                                              "expr": "sum by (node) (\n  (\n    node_memory_MemFree_bytes{job=\"node-exporter\"} +\n    node_memory_Cached_bytes{job=\"node-exporter\"} +\n    node_memory_Buffers_bytes{job=\"node-exporter\"}\n  )\n  * on (namespace, pod) group_left(node)\n    node_namespace_pod:kube_pod_info:\n)",
                                              "record": "node:node_memory_bytes_available:sum"
                                          },
                                          {
                                              "expr": "(node:node_memory_bytes_total:sum - node:node_memory_bytes_available:sum)\n/\nnode:node_memory_bytes_total:sum",
                                              "record": "node:node_memory_utilisation:ratio"
                                          },
                                          {
                                              "expr": "1 -\nsum by (node) (\n  (\n    node_memory_MemFree_bytes{job=\"node-exporter\"} +\n    node_memory_Cached_bytes{job=\"node-exporter\"} +\n    node_memory_Buffers_bytes{job=\"node-exporter\"}\n  )\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:\n)\n/\nsum by (node) (\n  node_memory_MemTotal_bytes{job=\"node-exporter\"}\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:\n)",
                                              "record": "node:node_memory_utilisation:"
                                          },
                                          {
                                              "expr": "1 - (node:node_memory_bytes_available:sum / node:node_memory_bytes_total:sum)",
                                              "record": "node:node_memory_utilisation_2:"
                                          },
                                          {
                                              "expr": "max by (instance, namespace, pod, device) ((node_filesystem_size_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"}\n- node_filesystem_avail_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"})\n/ node_filesystem_size_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"})",
                                              "record": "node:node_filesystem_usage:"
                                          },
                                          {
                                              "expr": "sum by (node) (\n  node_memory_MemTotal_bytes{job=\"node-exporter\"}\n  * on (namespace, pod) group_left(node)\n    node_namespace_pod:kube_pod_info:\n)",
                                              "record": "node:node_memory_bytes_total:sum"
                                          },
                                          {
                                              "expr": "sum(irate(node_network_receive_bytes_total{job=\"node-exporter\",device!~\"veth.+\"}[1m])) +\nsum(irate(node_network_transmit_bytes_total{job=\"node-exporter\",device!~\"veth.+\"}[1m]))",
                                              "record": ":node_net_utilisation:sum_irate"
                                          },
                                          {
                                              "expr": "sum by (node) (\n  (irate(node_network_receive_bytes_total{job=\"node-exporter\",device!~\"veth.+\"}[1m]) +\n  irate(node_network_transmit_bytes_total{job=\"node-exporter\",device!~\"veth.+\"}[1m]))\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:\n)",
                                              "record": "node:node_net_utilisation:sum_irate"
                                          },
                                          {
                                              "expr": "sum(irate(node_network_receive_drop_total{job=\"node-exporter\",device!~\"veth.+\"}[1m])) +\nsum(irate(node_network_transmit_drop_total{job=\"node-exporter\",device!~\"veth.+\"}[1m]))",
                                              "record": ":node_net_saturation:sum_irate"
                                          },
                                          {
                                              "expr": "sum by (node) (\n  (irate(node_network_receive_drop_total{job=\"node-exporter\",device!~\"veth.+\"}[1m]) +\n  irate(node_network_transmit_drop_total{job=\"node-exporter\",device!~\"veth.+\"}[1m]))\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:\n)",
                                              "record": "node:node_net_saturation:sum_irate"
                                          },
                                          {
                                              "expr": "max by (instance, namespace, pod, device) ((node_filesystem_size_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"}\n- node_filesystem_avail_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"})\n/ node_filesystem_size_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"})",
                                              "record": "node:node_filesystem_usage:"
                                          },
                                          {
                                              "expr": "sum(node_load1{job=\"node-exporter\"})\n/\nsum(node:node_num_cpu:sum)",
                                              "record": ":node_cpu_saturation_load1:"
                                          },
                                          {
                                              "expr": "sum by (node) (\n  node_load1{job=\"node-exporter\"}\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:\n)\n/\nnode:node_num_cpu:sum",
                                              "record": "node:node_cpu_saturation_load1:"
                                          },
                                          {
                                              "expr": "avg(irate(node_disk_io_time_weighted_seconds_total{job=\"node-exporter\",device=~\"nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+\"}[1m]))",
                                              "record": ":node_disk_saturation:avg_irate"
                                          },
                                          {
                                              "expr": "avg by (node) (\n  irate(node_disk_io_time_weighted_seconds_total{job=\"node-exporter\",device=~\"nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+\"}[1m])\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:\n)",
                                              "record": "node:node_disk_saturation:avg_irate"
                                          },
                                          {
                                              "expr": "avg(irate(node_disk_io_time_seconds_total{job=\"node-exporter\",device=~\"nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+\"}[1m]))",
                                              "record": ":node_disk_utilisation:avg_irate"
                                          },
                                          {
                                              "expr": "avg by (node) (\n  irate(node_disk_io_time_seconds_total{job=\"node-exporter\",device=~\"nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+\"}[1m])\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:\n)",
                                              "record": "node:node_disk_utilisation:avg_irate"
                                          },
                                          {
                                              "expr": "1e3 * sum(\n  (rate(node_vmstat_pgpgin{job=\"node-exporter\"}[1m])\n+ rate(node_vmstat_pgpgout{job=\"node-exporter\"}[1m]))\n)",
                                              "record": ":node_memory_swap_io_bytes:sum_rate"
                                          },
                                          {
                                              "expr": "1e3 * sum by (node) (\n  (rate(node_vmstat_pgpgin{job=\"node-exporter\"}[1m])\n+ rate(node_vmstat_pgpgout{job=\"node-exporter\"}[1m]))\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:\n)",
                                              "record": "node:node_memory_swap_io_bytes:sum_rate"
                                          },
                                          {
                                              "expr": "node:node_cpu_utilisation:avg1m\n  *\nnode:node_num_cpu:sum\n  /\nscalar(sum(node:node_num_cpu:sum))",
                                              "record": "node:cluster_cpu_utilisation:ratio"
                                          },
                                          {
                                              "expr": "(node:node_memory_bytes_total:sum - node:node_memory_bytes_available:sum)\n/\nscalar(sum(node:node_memory_bytes_total:sum))",
                                              "record": "node:cluster_memory_utilisation:ratio"
                                          },
                                          {
                                              "expr": "sum by (node) (\n  node_load1{job=\"node-exporter\"}\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:\n)\n/\nnode:node_num_cpu:sum",
                                              "record": "node:node_cpu_saturation_load1:"
                                          },
                                          {
                                              "expr": "max by (instance, namespace, pod, device) (\n  node_filesystem_avail_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"}\n  /\n  node_filesystem_size_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"}\n  )",
                                              "record": "node:node_filesystem_avail:"
                                          },
                                          {
                                              "expr": "max by (instance, namespace, pod, device) ((node_filesystem_size_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"}\n- node_filesystem_avail_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"})\n/ node_filesystem_size_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"})",
                                              "record": "node:node_filesystem_usage:"
                                          },
                                          {
                                              "expr": "max(\n  max(\n    kube_pod_info{job=\"kube-state-metrics\", host_ip!=\"\"}\n  ) by (node, host_ip)\n  * on (host_ip) group_right (node)\n  label_replace(\n    (\n      max(node_filesystem_files{job=\"node-exporter\", mountpoint=\"/\"})\n      by (instance)\n    ), \"host_ip\", \"$1\", \"instance\", \"(.*):.*\"\n  )\n) by (node)",
                                              "record": "node:node_inodes_total:"
                                          },
                                          {
                                              "expr": "max(\n  max(\n    kube_pod_info{job=\"kube-state-metrics\", host_ip!=\"\"}\n  ) by (node, host_ip)\n  * on (host_ip) group_right (node)\n  label_replace(\n    (\n      max(node_filesystem_files_free{job=\"node-exporter\", mountpoint=\"/\"})\n      by (instance)\n    ), \"host_ip\", \"$1\", \"instance\", \"(.*):.*\"\n  )\n) by (node)",
                                              "record": "node:node_inodes_free:"
                                          }
                                      ]
                                  }
                              ]
                          }
                      },
                      "kubeApiServer": {
                          "serviceMonitor": {
                              "interval": null
                          }
                      },
                      "kubelet": {
                          "serviceMonitor": {
                              "interval": null,
                              "resource": false
                          }
                      },
                      "kubeControllerManager": {
                          "serviceMonitor": {
                              "interval": null
                          }
                      },
                      "coreDns": {
                          "serviceMonitor": {
                              "interval": null
                          }
                      },
                      "kubeEtcd": {
                          "serviceMonitor": {
                              "interval": null
                          }
                      },
                      "kubeScheduler": {
                          "serviceMonitor": {
                              "interval": null
                          }
                      },
                      "kubeStateMetrics": {
                          "serviceMonitor": {
                              "interval": null
                          }
                      },
                      "nodeExporter": {
                          "serviceMonitor": {
                              "interval": null
                          }
                      },
                      "alertmanager": {
                          "enabled": false
                      },
                      "grafana": {
                          "enabled": false,
                          "defaultDashboardsEnabled": false
                      },
                      "prometheusOperator": {
                          "podLabels": {},
                          "podAnnotations": {},
                          "resources": {},
                          "admissionWebhooks": {
                              "enabled": false
                          },
                          "tls": {
                              "enabled": false
                          },
                          "denyNamespaces": [
                              "openshift-apiserver",
                              "openshift-apiserver-operator",
                              "openshift-authentication",
                              "openshift-authentication-operator",
                              "openshift-cloud-credential-operator",
                              "openshift-cluster-machine-approver",
                              "openshift-cluster-samples-operator",
                              "openshift-cluster-storage-operator",
                              "openshift-cluster-version",
                              "openshift-config-operator",
                              "openshift-console-operator",
                              "openshift-controller-manager",
                              "openshift-controller-manager-operator",
                              "openshift-dns,openshift-dns-operator",
                              "openshift-etcd-operator",
                              "openshift-image-registry",
                              "openshift-ingress",
                              "openshift-ingress-operator",
                              "openshift-insights",
                              "openshift-kube-apiserver",
                              "openshift-kube-apiserver-operator",
                              "openshift-kube-controller-manager",
                              "openshift-kube-controller-manager-operator",
                              "openshift-kube-scheduler",
                              "openshift-kube-scheduler-operator",
                              "openshift-kube-storage-version-migrator",
                              "openshift-kube-storage-version-migrator-operator",
                              "openshift-machine-api",
                              "openshift-machine-config-operator",
                              "openshift-marketplace",
                              "openshift-monitoring",
                              "openshift-multus",
                              "openshift-oauth-apiserver",
                              "openshift-operator-lifecycle-manager",
                              "openshift-sdn",
                              "openshift-service-ca-operator",
                              "openshift-user-workload-monitoring"
                          ]
                      },
                      "kube-state-metrics": {
                          "customLabels": {},
                          "podAnnotations": {},
                          "resources": {}
                      },
                      "prometheus-node-exporter": {
                          "service": {
                              "port": 9200,
                              "targetPort": 9200
                          },
                          "podLabels": {},
                          "podAnnotations": {},
                          "resources": {}
                      },
                      "prometheus": {
                          "additionalServiceMonitors": [
                              {
                                  "name": "collection-sumologic-fluentd-logs",
                                  "additionalLabels": {
                                      "sumologic.com/app": "fluentd-logs"
                                  },
                                  "endpoints": [
                                      {
                                          "port": "metrics"
                                      }
                                  ],
                                  "namespaceSelector": {
                                      "matchNames": [
                                          "$(NAMESPACE)"
                                      ]
                                  },
                                  "selector": {
                                      "matchLabels": {
                                          "sumologic.com/app": "fluentd-logs",
                                          "sumologic.com/scrape": "true"
                                      }
                                  }
                              },
                              {
                                  "name": "collection-sumologic-fluentd-metrics",
                                  "additionalLabels": {
                                      "sumologic.com/app": "fluentd-metrics"
                                  },
                                  "endpoints": [
                                      {
                                          "port": "metrics"
                                      }
                                  ],
                                  "namespaceSelector": {
                                      "matchNames": [
                                          "$(NAMESPACE)"
                                      ]
                                  },
                                  "selector": {
                                      "matchLabels": {
                                          "sumologic.com/app": "fluentd-metrics",
                                          "sumologic.com/scrape": "true"
                                      }
                                  }
                              },
                              {
                                  "name": "collection-sumologic-fluentd-events",
                                  "additionalLabels": {
                                      "sumologic.com/app": "fluentd-events"
                                  },
                                  "endpoints": [
                                      {
                                          "port": "metrics"
                                      }
                                  ],
                                  "namespaceSelector": {
                                      "matchNames": [
                                          "$(NAMESPACE)"
                                      ]
                                  },
                                  "selector": {
                                      "matchLabels": {
                                          "sumologic.com/app": "fluentd-events",
                                          "sumologic.com/scrape": "true"
                                      }
                                  }
                              },
                              {
                                  "name": "collection-fluent-bit",
                                  "additionalLabels": {
                                      "app": "collection-fluent-bit"
                                  },
                                  "endpoints": [
                                      {
                                          "port": "http",
                                          "path": "/api/v1/metrics/prometheus"
                                      }
                                  ],
                                  "namespaceSelector": {
                                      "matchNames": [
                                          "$(NAMESPACE)"
                                      ]
                                  },
                                  "selector": {
                                      "matchLabels": {
                                          "app.kubernetes.io/name": "fluent-bit",
                                          "sumologic.com/scrape": "true"
                                      }
                                  }
                              },
                              {
                                  "name": "collection-sumologic-otelcol",
                                  "additionalLabels": {
                                      "sumologic.com/app": "otelcol"
                                  },
                                  "endpoints": [
                                      {
                                          "port": "metrics"
                                      }
                                  ],
                                  "namespaceSelector": {
                                      "matchNames": [
                                          "$(NAMESPACE)"
                                      ]
                                  },
                                  "selector": {
                                      "matchLabels": {
                                          "sumologic.com/app": "otelcol",
                                          "sumologic.com/scrape": "true"
                                      }
                                  }
                              }
                          ],
                          "prometheusSpec": {
                              "scrapeInterval": "30s",
                              "retention": "1d",
                              "podMetadata": {
                                  "labels": {},
                                  "annotations": {}
                              },
                              "resources": {
                                  "limits": {
                                      "cpu": "2000m",
                                      "memory": "8Gi"
                                  },
                                  "requests": {
                                      "cpu": "500m",
                                      "memory": "1Gi"
                                  }
                              },
                              "thanos": {
                                  "baseImage": "quay.io/thanos/thanos",
                                  "version": "v0.10.0",
                                  "resources": {
                                      "limits": {
                                          "cpu": "10m",
                                          "memory": "32Mi"
                                      },
                                      "requests": {
                                          "cpu": "1m",
                                          "memory": "8Mi"
                                      }
                                  }
                              },
                              "containers": [
                                  {
                                      "name": "config-reloader",
                                      "env": [
                                          {
                                              "name": "FLUENTD_METRICS_SVC",
                                              "valueFrom": {
                                                  "configMapKeyRef": {
                                                      "name": "sumologic-configmap",
                                                      "key": "fluentdMetrics"
                                                  }
                                              }
                                          },
                                          {
                                              "name": "NAMESPACE",
                                              "valueFrom": {
                                                  "configMapKeyRef": {
                                                      "name": "sumologic-configmap",
                                                      "key": "fluentdNamespace"
                                                  }
                                              }
                                          }
                                      ]
                                  }
                              ],
                              "walCompression": true,
                              "additionalScrapeConfigs": [
                                  {
                                      "job_name": "kubernetes-pods",
                                      "kubernetes_sd_configs": [
                                          {
                                              "role": "pod"
                                          }
                                      ],
                                      "relabel_configs": [
                                          {
                                              "source_labels": [
                                                  "__meta_kubernetes_pod_annotation_prometheus_io_scrape"
                                              ],
                                              "action": "keep",
                                              "regex": true
                                          },
                                          {
                                              "source_labels": [
                                                  "__meta_kubernetes_pod_annotation_prometheus_io_path"
                                              ],
                                              "action": "replace",
                                              "target_label": "__metrics_path__",
                                              "regex": "(.+)"
                                          },
                                          {
                                              "source_labels": [
                                                  "__address__",
                                                  "__meta_kubernetes_pod_annotation_prometheus_io_port"
                                              ],
                                              "action": "replace",
                                              "regex": "([^:]+)(?::\\d+)?;(\\d+)",
                                              "replacement": "$1:$2",
                                              "target_label": "__address__"
                                          },
                                          {
                                              "source_labels": [
                                                  "__meta_kubernetes_endpoint_address_target_kind",
                                                  "__meta_kubernetes_endpoint_address_target_name"
                                              ],
                                              "separator": ";",
                                              "regex": "Node;(.*)",
                                              "target_label": "node",
                                              "replacement": "${1}",
                                              "action": "replace"
                                          },
                                          {
                                              "source_labels": [
                                                  "__meta_kubernetes_endpoint_address_target_kind",
                                                  "__meta_kubernetes_endpoint_address_target_name"
                                              ],
                                              "separator": ";",
                                              "regex": "Pod;(.*)",
                                              "target_label": "pod",
                                              "replacement": "${1}",
                                              "action": "replace"
                                          },
                                          {
                                              "source_labels": [
                                                  "__metrics_path__"
                                              ],
                                              "separator": ";",
                                              "regex": "(.*)",
                                              "target_label": "endpoint",
                                              "replacement": "$1",
                                              "action": "replace"
                                          },
                                          {
                                              "source_labels": [
                                                  "__meta_kubernetes_namespace"
                                              ],
                                              "action": "replace",
                                              "target_label": "namespace"
                                          },
                                          {
                                              "action": "labelmap",
                                              "regex": "__meta_kubernetes_pod_label_(.+)"
                                          },
                                          {
                                              "source_labels": [
                                                  "__meta_kubernetes_service_name"
                                              ],
                                              "separator": ";",
                                              "regex": "(.*)",
                                              "target_label": "service",
                                              "replacement": "$1",
                                              "action": "replace"
                                          },
                                          {
                                              "source_labels": [
                                                  "__meta_kubernetes_pod_name"
                                              ],
                                              "separator": ";",
                                              "regex": "(.*)",
                                              "target_label": "pod",
                                              "replacement": "$1",
                                              "action": "replace"
                                          },
                                          {
                                              "source_labels": [
                                                  "__meta_kubernetes_service_name"
                                              ],
                                              "separator": ";",
                                              "regex": "(.*)",
                                              "target_label": "job",
                                              "replacement": "${1}",
                                              "action": "replace"
                                          }
                                      ]
                                  }
                              ],
                              "remoteWrite": [
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.state",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "kube-state-metrics;(?:kube_statefulset_status_observed_generation|kube_statefulset_status_replicas|kube_statefulset_replicas|kube_statefulset_metadata_generation|kube_daemonset_status_current_number_scheduled|kube_daemonset_status_desired_number_scheduled|kube_daemonset_status_number_misscheduled|kube_daemonset_status_number_unavailable|kube_deployment_spec_replicas|kube_deployment_status_replicas_available|kube_deployment_status_replicas_unavailable|kube_node_info|kube_node_status_allocatable|kube_node_status_capacity|kube_node_status_condition|kube_hpa_spec_max_replicas|kube_hpa_spec_min_replicas|kube_hpa_status_current_replicas|kube_hpa_status_desired_replicas)",
                                              "sourceLabels": [
                                                  "job",
                                                  "__name__"
                                              ]
                                          },
                                          {
                                              "action": "labelmap",
                                              "regex": "(pod|service)",
                                              "replacement": "service_discovery_${1}"
                                          },
                                          {
                                              "action": "labeldrop",
                                              "regex": "(pod|service)"
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.state",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "kube-state-metrics;(?:kube_pod_container_info|kube_pod_container_resource_requests|kube_pod_container_resource_limits|kube_pod_container_status_ready|kube_pod_container_status_terminated_reason|kube_pod_container_status_waiting_reason|kube_pod_container_status_restarts_total|kube_pod_status_phase)",
                                              "sourceLabels": [
                                                  "job",
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.controller-manager",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "kubelet;cloudprovider_.*_api_request_duration_seconds.*",
                                              "sourceLabels": [
                                                  "job",
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.scheduler",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "kube-scheduler;scheduler_(?:e2e_scheduling|binding|scheduling_algorithm)_duration_seconds.*",
                                              "sourceLabels": [
                                                  "job",
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.apiserver",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "apiserver;(?:apiserver_request_(?:count|total)|apiserver_request_(?:duration_seconds|latencies)_(?:count|sum)|apiserver_request_latencies_summary(?:|_count|_sum)|etcd_request_cache_(?:add|get)_(?:duration_seconds|latencies_summary)_(?:count|sum)|etcd_helper_cache_(?:hit|miss)_(?:count|total))",
                                              "sourceLabels": [
                                                  "job",
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.kubelet",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "kubelet;(?:kubelet_docker_operations_errors(?:|_total)|kubelet_(?:docker|runtime)_operations_duration_seconds_(?:count|sum)|kubelet_running_(?:container|pod)(?:_count|s)|kubelet_(:?docker|runtime)_operations_latency_microseconds(?:|_count|_sum))",
                                              "sourceLabels": [
                                                  "job",
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.container",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "labelmap",
                                              "regex": "container_name",
                                              "replacement": "container"
                                          },
                                          {
                                              "action": "drop",
                                              "regex": "POD",
                                              "sourceLabels": [
                                                  "container"
                                              ]
                                          },
                                          {
                                              "action": "keep",
                                              "regex": "kubelet;.+;(?:container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_fs_usage_bytes|container_fs_limit_bytes|container_cpu_cfs_throttled_seconds_total)",
                                              "sourceLabels": [
                                                  "job",
                                                  "container",
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.container",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "kubelet;(?:container_network_receive_bytes_total|container_network_transmit_bytes_total)",
                                              "sourceLabels": [
                                                  "job",
                                                  "__name__"
                                              ]
                                          },
                                          {
                                              "action": "labeldrop",
                                              "regex": "container"
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.node",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "node-exporter;(?:node_load1|node_load5|node_load15|node_cpu_seconds_total)",
                                              "sourceLabels": [
                                                  "job",
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.operator.rule",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "cluster_quantile:apiserver_request_duration_seconds:histogram_quantile|instance:node_filesystem_usage:sum|instance:node_network_receive_bytes:rate:sum|cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile|cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile|cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile|node_namespace_pod:kube_pod_info:|:kube_pod_info_node_count:|node:node_num_cpu:sum|:node_cpu_utilisation:avg1m|node:node_cpu_utilisation:avg1m|node:cluster_cpu_utilisation:ratio|:node_cpu_saturation_load1:|node:node_cpu_saturation_load1:|:node_memory_utilisation:|node:node_memory_bytes_total:sum|node:node_memory_utilisation:ratio|node:cluster_memory_utilisation:ratio|:node_memory_swap_io_bytes:sum_rate|node:node_memory_utilisation:|node:node_memory_utilisation_2:|node:node_memory_swap_io_bytes:sum_rate|:node_disk_utilisation:avg_irate|node:node_disk_utilisation:avg_irate|:node_disk_saturation:avg_irate|node:node_disk_saturation:avg_irate|node:node_filesystem_usage:|node:node_filesystem_avail:|:node_net_utilisation:sum_irate|node:node_net_utilisation:sum_irate|:node_net_saturation:sum_irate|node:node_net_saturation:sum_irate|node:node_inodes_total:|node:node_inodes_free:",
                                              "sourceLabels": [
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "(?:up|prometheus_remote_storage_.*|fluentd_.*|fluentbit.*|otelcol.*)",
                                              "sourceLabels": [
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.control-plane.coredns",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "coredns;(?:coredns_cache_(size|entries|(hits|misses)_total)|coredns_dns_request_duration_seconds_(count|sum)|coredns_(dns_request|dns_response_rcode|forward_request)_count_total|coredns_(forward_requests|dns_requests|dns_responses)_total|process_(cpu_seconds_total|open_fds|resident_memory_bytes))",
                                              "sourceLabels": [
                                                  "job",
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.control-plane.kube-etcd",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "kube-etcd;(?:etcd_debugging_(mvcc_db_total_size_in_bytes|store_(expires_total|watchers))|etcd_disk_(backend_commit|wal_fsync)_duration_seconds_bucket|etcd_grpc_proxy_cache_(hits|misses)_total|etcd_network_client_grpc_(received|sent)_bytes_total|etcd_server_(has_leader|leader_changes_seen_total)|etcd_server_proposals_(pending|(applied|committed|failed)_total)|process_(cpu_seconds_total|open_fds|resident_memory_bytes))",
                                              "sourceLabels": [
                                                  "job",
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.applications.nginx-ingress",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "(?:nginx_ingress_controller_ingress_resources_total|nginx_ingress_controller_nginx_(last_reload_(milliseconds|status)|reload(s|_errors)_total)|nginx_ingress_controller_virtualserver(|route)_resources_total|nginx_ingress_nginx_connections_(accepted|active|handled|reading|waiting|writing)|nginx_ingress_nginx_http_requests_total)",
                                              "sourceLabels": [
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.applications.nginx",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "(?:nginx_(accepts|active|handled|reading|requests|waiting|writing))",
                                              "sourceLabels": [
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.applications.redis",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "(?:redis_((blocked_|)clients|cluster_enabled|cmdstat_calls|connected_slaves|(evicted|expired|tracking_total)_keys|instantaneous_ops_per_sec|keyspace_(hitrate|hits|misses)|(master|slave)_repl_offset|maxmemory|mem_fragmentation_(bytes|ratio)|rdb_changes_since_last_save|rejected_connections|total_commands_processed|total_net_(input|output)_bytes|uptime|used_(cpu_(sys|user)|memory(_overhead|_rss|_startup|))))",
                                              "sourceLabels": [
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "url": "http://$(FLUENTD_METRICS_SVC).$(NAMESPACE).svc.cluster.local:9888/prometheus.metrics.applications.jmx",
                                      "remoteTimeout": "5s",
                                      "writeRelabelConfigs": [
                                          {
                                              "action": "keep",
                                              "regex": "(?:java_lang_(ClassLoading_(TotalL|Unl|L)oadedClassCount|Compilation_TotalCompilationTime|GarbageCollector_(Collection(Count|Time)|LastGcInfo_(GcThreadCount|duration|(memoryU|u)sage(After|Before)Gc_.*_used))|MemoryPool_(CollectionUsage(ThresholdSupported|_committed|_max|_used)|(Peak|)Usage_(committed|max|used)|UsageThresholdSupported)|Memory_((Non|)HeapMemoryUsage_(committed|max|used)|ObjectPendingFinalizationCount)|OperatingSystem_(AvailableProcessors|(CommittedVirtual|(Free|Total)(Physical|))MemorySize|(Free|Total)SwapSpaceSize|(Max|Open)FileDescriptorCount|ProcessCpu(Load|Time)|System(CpuLoad|LoadAverage))|Runtime_(BootClassPathSupported|Pid|Uptime|StartTime)|Threading_(CurrentThread(AllocatedBytes|(Cpu|User)Time)|(Daemon|Peak|TotalStarted|)ThreadCount|(ObjectMonitor|Synchronizer)UsageSupported|Thread(AllocatedMemory.*|ContentionMonitoring.*|CpuTime.*))))",
                                              "sourceLabels": [
                                                  "__name__"
                                              ]
                                          }
                                      ]
                                  }
                              ]
                          }
                      }
                  },
                  "otelagent": {
                      "enabled": false,
                      "daemonset": {
                          "nodeSelector": {},
                          "tolerations": [],
                          "resources": {
                              "limits": {
                                  "memory": "2Gi",
                                  "cpu": "1000m"
                              },
                              "requests": {
                                  "memory": "196Mi",
                                  "cpu": "50m"
                              }
                          },
                          "podLabels": {},
                          "podAnnotations": {},
                          "memBallastSizeMib": "250",
                          "image": {
                              "repository": "public.ecr.aws/sumologic/opentelemetry-collector",
                              "tag": "0.22.0-sumo",
                              "pullPolicy": "IfNotPresent"
                          }
                      },
                      "config": {
                          "receivers": {
                              "jaeger": {
                                  "protocols": {
                                      "thrift_compact": {
                                          "endpoint": "0.0.0.0:6831"
                                      },
                                      "thrift_binary": {
                                          "endpoint": "0.0.0.0:6832"
                                      },
                                      "grpc": {
                                          "endpoint": "0.0.0.0:14250"
                                      },
                                      "thrift_http": {
                                          "endpoint": "0.0.0.0:14268"
                                      }
                                  }
                              },
                              "opencensus": {
                                  "endpoint": "0.0.0.0:55678"
                              },
                              "otlp": {
                                  "protocols": {
                                      "grpc": {
                                          "endpoint": "0.0.0.0:4317"
                                      },
                                      "http": {
                                          "endpoint": "0.0.0.0:55681"
                                      }
                                  }
                              },
                              "zipkin": {
                                  "endpoint": "0.0.0.0:9411"
                              }
                          },
                          "processors": {
                              "k8s_tagger": {
                                  "passthrough": true
                              },
                              "memory_limiter": {
                                  "check_interval": "5s",
                                  "limit_mib": 1900
                              },
                              "batch": {
                                  "send_batch_size": 256,
                                  "timeout": "5s"
                              }
                          },
                          "extensions": {
                              "health_check": {}
                          },
                          "exporters": {
                              "otlp": {
                                  "endpoint": "exporters.otlp.endpoint.replace:4317",
                                  "insecure": true
                              }
                          },
                          "service": {
                              "extensions": [
                                  "health_check"
                              ],
                              "pipelines": {
                                  "traces": {
                                      "receivers": [
                                          "jaeger",
                                          "opencensus",
                                          "otlp",
                                          "zipkin"
                                      ],
                                      "processors": [
                                          "memory_limiter",
                                          "k8s_tagger",
                                          "batch"
                                      ],
                                      "exporters": [
                                          "otlp"
                                      ]
                                  }
                              }
                          }
                      }
                  },
                  "otelcol": {
                      "deployment": {
                          "nodeSelector": {},
                          "tolerations": [],
                          "replicas": 1,
                          "resources": {
                              "limits": {
                                  "memory": "2Gi",
                                  "cpu": "1000m"
                              },
                              "requests": {
                                  "memory": "384Mi",
                                  "cpu": "200m"
                              }
                          },
                          "priorityClassName": null,
                          "podLabels": {},
                          "podAnnotations": {},
                          "memBallastSizeMib": "683",
                          "image": {
                              "repository": "public.ecr.aws/sumologic/opentelemetry-collector",
                              "tag": "0.22.0-sumo",
                              "pullPolicy": "IfNotPresent"
                          }
                      },
                      "logLevelFilter": true,
                      "metrics": {
                          "enabled": true
                      },
                      "config": {
                          "receivers": {
                              "jaeger": {
                                  "protocols": {
                                      "thrift_compact": {
                                          "endpoint": "0.0.0.0:6831"
                                      },
                                      "thrift_binary": {
                                          "endpoint": "0.0.0.0:6832"
                                      },
                                      "grpc": {
                                          "endpoint": "0.0.0.0:14250"
                                      },
                                      "thrift_http": {
                                          "endpoint": "0.0.0.0:14268"
                                      }
                                  }
                              },
                              "opencensus": {
                                  "endpoint": "0.0.0.0:55678"
                              },
                              "otlp": {
                                  "protocols": {
                                      "grpc": {
                                          "endpoint": "0.0.0.0:4317"
                                      },
                                      "http": {
                                          "endpoint": "0.0.0.0:55681"
                                      }
                                  }
                              },
                              "zipkin": {
                                  "endpoint": "0.0.0.0:9411"
                              }
                          },
                          "processors": {
                              "k8s_tagger": {
                                  "passthrough": false,
                                  "owner_lookup_enabled": true,
                                  "extract": {
                                      "metadata": [
                                          "containerId",
                                          "containerName",
                                          "clusterName",
                                          "daemonSetName",
                                          "deploymentName",
                                          "hostName",
                                          "namespace",
                                          "nodeName",
                                          "podId",
                                          "podName",
                                          "replicaSetName",
                                          "serviceName",
                                          "statefulSetName"
                                      ],
                                      "annotations": [
                                          {
                                              "tag_name": "k8s.pod.annotation.%s",
                                              "key": "*"
                                          }
                                      ],
                                      "namespace_labels": [
                                          {
                                              "tag_name": "k8s.namespace.label.%s",
                                              "key": "*"
                                          }
                                      ],
                                      "labels": [
                                          {
                                              "tag_name": "k8s.pod.label.%s",
                                              "key": "*"
                                          }
                                      ]
                                  }
                              },
                              "source": {
                                  "collector": "processors.source.collector.replace",
                                  "source_name": "processors.source.name.replace",
                                  "source_category": "processors.source.category.replace",
                                  "source_category_prefix": "processors.source.category_prefix.replace",
                                  "source_category_replace_dash": "processors.source.category_replace_dash.replace",
                                  "exclude_namespace_regex": "processors.source.exclude_namespace_regex.replace",
                                  "exclude_pod_regex": "processors.source.exclude_pod_regex.replace",
                                  "exclude_container_regex": "processors.source.exclude_container_regex.replace",
                                  "exclude_host_regex": "processors.source.exclude_host_regex.replace",
                                  "annotation_prefix": "k8s.pod.annotation.",
                                  "pod_template_hash_key": "k8s.pod.label.pod-template-hash",
                                  "pod_name_key": "k8s.pod.pod_name",
                                  "namespace_key": "k8s.namespace.name",
                                  "pod_key": "k8s.pod.name",
                                  "container_key": "k8s.container.name",
                                  "source_host_key": "k8s.pod.hostname"
                              },
                              "resource": {
                                  "attributes": [
                                      {
                                          "key": "k8s.cluster.name",
                                          "value": "processors.resource.cluster.replace",
                                          "action": "upsert"
                                      }
                                  ]
                              },
                              "memory_limiter": {
                                  "check_interval": "5s",
                                  "limit_mib": 1900
                              },
                              "cascading_filter": {
                                  "decision_wait": "30s",
                                  "num_traces": 90000,
                                  "expected_new_traces_per_sec": 100,
                                  "spans_per_second": 1660,
                                  "probabilistic_filtering_ratio": 0.2,
                                  "policies": [
                                      {
                                          "name": "extended-duration",
                                          "spans_per_second": 500,
                                          "properties": {
                                              "min_duration": "5s"
                                          }
                                      },
                                      {
                                          "name": "everything-else",
                                          "spans_per_second": -1
                                      }
                                  ]
                              },
                              "batch": {
                                  "send_batch_size": 256,
                                  "send_batch_max_size": 512,
                                  "timeout": "5s"
                              }
                          },
                          "extensions": {
                              "health_check": {}
                          },
                          "exporters": {
                              "zipkin": {
                                  "endpoint": "${SUMO_ENDPOINT_DEFAULT_TRACES_SOURCE}"
                              },
                              "otlphttp": {
                                  "traces_endpoint": "${SUMO_ENDPOINT_DEFAULT_TRACES_SOURCE}",
                                  "compression": "gzip"
                              }
                          },
                          "service": {
                              "extensions": [
                                  "health_check"
                              ],
                              "pipelines": {
                                  "traces": {
                                      "receivers": [
                                          "jaeger",
                                          "opencensus",
                                          "otlp",
                                          "zipkin"
                                      ],
                                      "processors": [
                                          "memory_limiter",
                                          "k8s_tagger",
                                          "source",
                                          "resource",
                                          "batch"
                                      ],
                                      "exporters": [
                                          "otlphttp"
                                      ]
                                  }
                              }
                          }
                      }
                  },
                  "telegraf-operator": {
                      "enabled": false,
                      "image": {
                          "sidecarImage": "public.ecr.aws/sumologic/telegraf:1.14.4"
                      },
                      "replicaCount": 1,
                      "classes": {
                          "secretName": "telegraf-operator-classes",
                          "default": "sumologic-prometheus",
                          "data": {
                              "sumologic-prometheus": "[[outputs.prometheus_client]]\n  ## Configuration details:\n  ## https://github.com/influxdata/telegraf/tree/master/plugins/outputs/prometheus_client#configuration\n  listen = \":9273\"\n  metric_version = 2\n"
                          }
                      }
                  },
                  "falco": {
                      "enabled": false,
                      "image": {
                          "registry": "public.ecr.aws",
                          "repository": "sumologic/falco"
                      },
                      "addKernelDevel": true,
                      "extraInitContainers": [
                          {
                              "name": "init-falco",
                              "image": "busybox:1.33.0",
                              "command": [
                                  "sh",
                                  "-c",
                                  "while [ -f /host/etc/redhat-release ] && [ -z \"$(ls /host/usr/src/kernels)\" ] ; do\necho \"waiting for kernel headers to be installed\"\nsleep 3\ndone\n"
                              ],
                              "volumeMounts": [
                                  {
                                      "mountPath": "/host/usr",
                                      "name": "usr-fs",
                                      "readOnly": true
                                  },
                                  {
                                      "mountPath": "/host/etc",
                                      "name": "etc-fs",
                                      "readOnly": true
                                  }
                              ]
                          }
                      ],
                      "falco": {
                          "jsonOutput": true
                      },
                      "customRules": {
                          "rules_user_known_k8s_api_callers.yaml": "- macro: user_known_contact_k8s_api_server_activities\n  condition: >\n    (container.image.repository = \"sumologic/kubernetes-fluentd\") or\n    (container.image.repository = \"quay.io/prometheus/prometheus\") or\n    (container.image.repository = \"quay.io/coreos/prometheus-operator\") or\n    (container.image.repository = \"quay.io/influxdb/telegraf-operator\") or\n    (container.image.repository = \"kiwigrid/k8s-sidecar\")",
                          "rules_user_sensitive_mount_containers.yaml": "- macro: user_sensitive_mount_containers\n  condition: >\n    (container.image.repository = \"falcosecurity/falco\") or\n    (container.image.repository = \"quay.io/prometheus/node-exporter\")",
                          "rules_user_privileged_containers.yaml": "- macro: user_privileged_containers\n  condition: >\n    (container.image.repository endswith \".amazonaws.com/eks/kube-proxy\")"
                      }
                  },
                  "tailing-sidecar-operator": {
                      "enabled": false
                  }
              }
          }
      ]
    capabilities: Basic Install
    categories: Logging & Tracing,Monitoring
    containerImage: public.ecr.aws/sumologic/sumologic-kubernetes-collection-helm-operator:0.0.4
    createdAt: "2021-05-07T14:10:11.766467319Z"
    repository: https://github.com/SumoLogic/sumologic-kubernetes-collection-helm-operator.git
    support: Sumo Logic
    operators.operatorframework.io/builder: operator-sdk-v1.6.1+git
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
  name: sumologic-kubernetes-collection-helm-operator
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
      - kind: SumologicCollection
        displayName: SumologicCollection
        description: Configuration for Sumo Logic Kubernetes Collection
        name: sumologiccollections.helm-operator.sumologic.com
        version: v1alpha1
        specDescriptors:
          - description: Sumo access ID
            displayName: Access ID
            path: sumologic.accessId
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - description: Sumo access key
            displayName: Access key
            path: sumologic.accessKey
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - description: Identifier for the Kubernetes cluster
            displayName: Cluster name
            path: sumologic.clusterName
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
  description: Helm Operator for the Sumo Logic Kubernetes Collection Chart
  displayName: Sumo Logic Kubernetes Collection Helm Operator
  icon:
    - base64data: 
      mediatype: ""
  install:
    spec:
      clusterPermissions:
        - rules:
            - apiGroups:
                - apps
              resources:
                - configmaps
                - deployments
                - daemonsets
                - endpoints
                - events
                - namespaces
                - nodes
                - pods
                - replicasets
                - services
                - statefulsets
              verbs:
                - '*'
            - apiGroups:
                - events.k8s.io
              resources:
                - configmaps
                - daemonsets
                - deployments
                - endpoints
                - events
                - namespaces
                - nodes
                - pods
                - replicasets
                - services
                - statefulsets
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - batch
              resources:
                - jobs
                - cronjobs
              verbs:
                - '*'
            - apiGroups:
                - helm-operator.sumologic.com
              resources:
                - sumologiccollections
                - sumologiccollections/status
                - sumologiccollections/finalizers
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - route.openshift.io
              resources:
                - routes
              verbs:
                - '*'
            - apiGroups:
                - ""
              resources:
                - configmaps
                - deployments
                - daemonsets
                - endpoints
                - events
                - limitranges
                - lists
                - namespaces
                - nodes
                - nodes/metrics
                - nodes/stats
                - persistentvolumeclaims
                - persistentvolumes
                - persistentvolumeclaims/finalizers
                - persistentvolumes/finalizers
                - pods
                - pods/finalizers
                - pods/exec
                - pods/log
                - resourcequotas
                - replicasets
                - replicationcontrollers
                - serviceaccounts
                - secrets
                - secrets/finalizers
                - services
                - secrets/finalizers
                - statefulsets
              verbs:
                - '*'
            - apiGroups:
                - networking.k8s.io
              resources:
                - ingresses
              verbs:
                - '*'
            - apiGroups:
                - networking.k8s.io
              resources:
                - networkpolicies
              verbs:
                - list
                - watch
            - apiGroups:
                - security.openshift.io
              resources:
                - securitycontextconstraints
              verbs:
                - '*'
            - apiGroups:
                - apiextensions.k8s.io
              resources:
                - customresourcedefinitions
              verbs:
                - '*'
            - apiGroups:
                - policy
              resources:
                - poddisruptionbudgets
                - podsecuritypolicies
              verbs:
                - '*'
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - clusterrolebindings
                - clusterroles
                - roles
                - rolebindings
              verbs:
                - '*'
            - apiGroups:
                - extensions
              resources:
                - configmaps
                - daemonsets
                - deployments
                - endpoints
                - events
                - ingresses
                - namespaces
                - nodes
                - pods
                - replicasets
                - replicationcontrollers
                - services
                - statefulsets
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - extensions
              resources:
                - podsecuritypolicies
              verbs:
                - use
            - apiGroups:
                - monitoring.coreos.com
              resources:
                - alertmanagerconfigs
                - alertmanagers
                - alertmanagers/finalizers
                - podmonitors
                - probes
                - prometheuses
                - prometheuses/finalizers
                - prometheusrules
                - servicemonitors
                - thanosrulers
                - thanosrulers/finalizers
              verbs:
                - '*'
            - apiGroups:
                - admissionregistration.k8s.io
              resources:
                - mutatingwebhookconfigurations
                - validatingwebhookconfigurations
              verbs:
                - '*'
            - apiGroups:
                - autoscaling
              resources:
                - horizontalpodautoscalers
              verbs:
                - list
                - watch
            - apiGroups:
                - certificates.k8s.io
              resources:
                - certificatesigningrequests
              verbs:
                - '*'
            - apiGroups:
                - storage.k8s.io
              resources:
                - storageclasses
                - volumeattachments
              verbs:
                - list
                - watch
            - nonResourceURLs:
                - /metrics/cadvisor
                - /metrics
              verbs:
                - get
            - nonResourceURLs:
                - /healthz/*
              verbs:
                - get
            - apiGroups:
                - apiregistration.k8s.io
              resources:
                - apiservices
              verbs:
                - get
            - apiGroups:
                - machineconfiguration.openshift.io
              resources:
                - machineconfigs
              verbs:
                - '*'
            - apiGroups:
                - tailing-sidecar.sumologic.com
              resources:
                - tailingsidecars
                - tailingsidecars/status
              verbs:
                - '*'
            - apiGroups:
                - authentication.k8s.io
              resources:
                - tokenreviews
              verbs:
                - create
            - apiGroups:
                - authorization.k8s.io
              resources:
                - subjectaccessreviews
              verbs:
                - create
          serviceAccountName: sumologic-helm-operator
      deployments:
        - name: sumologic-helm-operator
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: sumologic-kubernetes-collection-helm-operator
            strategy: {}
            template:
              metadata:
                labels:
                  control-plane: sumologic-kubernetes-collection-helm-operator
              spec:
                containers:
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=10
                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.6.0
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                    resources: {}
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                      - --leader-election-id=sumologic-kubernetes-collection-helm-operator
                    image: public.ecr.aws/sumologic/sumologic-kubernetes-collection-helm-operator:0.0.4
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                    name: operator
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                    resources:
                      limits:
                        cpu: "2"
                        memory: 2Gi
                      requests:
                        cpu: 500m
                        memory: 100Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: sumologic-helm-operator
                terminationGracePeriodSeconds: 10
      permissions:
        - rules:
            - apiGroups:
                - ""
                - coordination.k8s.io
              resources:
                - configmaps
                - leases
              verbs:
                - get
                - list
                - watch
                - create
                - update
                - patch
                - delete
            - apiGroups:
                - ""
              resources:
                - events
              verbs:
                - create
                - patch
          serviceAccountName: sumologic-helm-operator
    strategy: deployment
  installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
  keywords:
    - collection
    - logging
    - metrics
    - monitoring
  links:
    - name: Sumo Logic Kubernetes Collection Helm Operator
      url: https://github.com/SumoLogic/sumologic-kubernetes-collection-helm-operator
  maintainers:
    - email: collection@sumologic.com
      name: Sumo Logic
  maturity: alpha
  provider:
    name: Sumo Logic
    url: https://www.sumologic.com/
  version: 0.0.6
