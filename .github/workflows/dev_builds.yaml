name: Dev builds

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      OPERATOR_IMAGE_NAME: sumologic-kubernetes-collection-helm-operator-dev
      BUNDLE_IMAGE_NAME: sumologic-kubernetes-collection-helm-operator-bundle-dev
      CATALOG_IMAGE_NAME: sumologic-kubernetes-collection-helm-operator-catalog-dev

      ECR_URL: public.ecr.aws/u5z5f8z6
      OPENSOURCE_ECR_URL:  public.ecr.aws/a4t4y2n3

    steps:
      - uses: actions/checkout@v2.3.4

      - name: Install Operator Package Manager (OPM)
        run: sudo wget -q "https://github.com/operator-framework/operator-registry/releases/download/${OPM_VERSION}/linux-amd64-opm" -O /usr/bin/opm && \
          sudo chmod +x /usr/bin/opm
        env:
          OPM_VERSION: v1.14.3

      - name: Checkout submodules
        run: git submodule update --init

      - name: Extract tag
        id: extract_tag
        run: echo "::set-output name=tag::$(echo $(git describe --tags --always))"

      - name: Print tag
        run: echo "Running release build for ${{ steps.extract_tag.outputs.tag }}"

      - name: Extract release number
        id: extract_release_number
        # count git tags omitting rc versions
        run: echo "::set-output name=release_number::$(echo $(git tag | sed '/rc/d' | wc -l))" 

      - name: Login to AWS public ECR
        run: make login
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PUBLIC_ECR_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PUBLIC_ECR_SECRET_ACCESS_KEY }}

      - name: Build and push operator image to public ECR
        run: make docker-build docker-push \
          IMG=${ECR_URL}/${OPERATOR_IMAGE_NAME}:${{ steps.extract_tag.outputs.tag }} \
          VERSION=${{ steps.extract_tag.outputs.tag }} \
          RELEASE_NUMBER=${{ steps.extract_release_number.outputs.release_number }}

      - name: Build and push bundle image to public ECR
        run: make bundle-build bundle-push \
          BUNDLE_IMG=${ECR_URL}/${BUNDLE_IMAGE_NAME}:${{ steps.extract_tag.outputs.tag }}

      - name: Build and push catalog image to public ECR
        run: make catalog-build catalog-push \
          CATALOG_IMG=${ECR_URL}/${CATALOG_IMAGE_NAME}:${{ steps.extract_tag.outputs.tag }} \
          BUNDLE_IMGS=${ECR_URL}/${BUNDLE_IMAGE_NAME}:${{ steps.extract_tag.outputs.tag }}

      - name: Login to Open Source ECR to publish operator
        run: make login-opensource
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_OPERATOR_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_OPERATOR_DEV }}

      - name: Build and push operator image to Open Source ECR
        run: make docker-build docker-push \
          IMG=${OPENSOURCE_ECR_URL}/${OPERATOR_IMAGE_NAME}:${{ steps.extract_tag.outputs.tag }} \
          VERSION=${{ steps.extract_tag.outputs.tag }} \
          RELEASE_NUMBER=${{ steps.extract_release_number.outputs.release_number }}

      - name: Login to Open Source ECR to publish bundle
        run: make login-opensource
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_BUNDLE_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_BUNDLE_DEV }}

      - name: Build and push bundle image to Open Source ECR
        run: make bundle-build bundle-push \
          BUNDLE_IMG=${OPENSOURCE_ECR_URL}/${BUNDLE_IMAGE_NAME}:${{ steps.extract_tag.outputs.tag }}

      - name: Login to Open Source ECR to publish catalog
        run: make login-opensource
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_CATALOG_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_CATALOG_DEV }}

      - name: Build and push catalog image to Open Source ECR
        run: make catalog-build catalog-push \
          CATALOG_IMG=${OPENSOURCE_ECR_URL}/${CATALOG_IMAGE_NAME}:${{ steps.extract_tag.outputs.tag }} \
          BUNDLE_IMGS=${OPENSOURCE_ECR_URL}/${BUNDLE_IMAGE_NAME}:${{ steps.extract_tag.outputs.tag }}
